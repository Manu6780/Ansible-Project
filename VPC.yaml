- hosts: localhost
  connection: local
  gather_facts: False

  tasks:
    - name: Import Variables
      include_vars: Vars/VPC_vars

    - name: create vpc
      ec2_vpc_net:
        name: "{{vpc_name}}"
        cidr_block: "{{vpcCIDR}}"
        region: "{{region}}"
        dns_support: yes
        dns_hostnames: yes
        state: "{{state}}"
      register: vpcout
    - debug:
        var: vpcout

    - name: public subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        cidr: "{{pub1CIDR}}"
        map_public: yes
        resource_tags:
          Name: PubSub1
      register: PubSub1

    - name: public subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        cidr: "{{pub2CIDR}}"
        map_public: yes
        resource_tags:
          Name: PubSub2
      register: PubSub2

    - name: priv subnet 1
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone1}}"
        state: "{{state}}"
        cidr: "{{priv1CIDR}}"

        resource_tags:
          Name: PrivSub1
      register: PrivSub1

    - name: priv subnet 2
      ec2_vpc_subnet:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        az: "{{zone2}}"
        state: "{{state}}"
        cidr: "{{priv2CIDR}}"

        resource_tags:
          Name: PrivSub2
      register: PrivSub2
    - name: Internet Gateway Setup
      ec2_vpc_igw:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        resource_tags:
          Name: IGW
      register: igwout
    - name: Set up Public subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        subnets:
          - "{{PubSub1.subnet.id}}"
          - "{{PubSub2.subnet.id}}"
        resource_tags:
          Name: PubSubRT
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{igwout.gateway_id}}"
      register: PubSubRT
    - name: Create NAT gateway and allocate Elastic IP
      ec2_vpc_nat_gateway:
        state: "{{state}}"
        subnet_id: "{{PubSub1.subnet.id}}"
        region: "{{region}}"
        wait: yes
        if_exist_do_not_create: true
      register: NatOut
    - name: Set up Priv subnet route table
      ec2_vpc_route_table:
        vpc_id: "{{vpcout.vpc.id}}"
        region: "{{region}}"
        state: "{{state}}"
        subnets:
          - "{{PrivSub1.subnet.id}}"
          - "{{PrivSub2.subnet.id}}"
        resource_tags:
          Name: PrivSubRT
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{NatOut.nat_gateway_id}}"
      register: PrivSubRT
    - debug:
        var: "{{item}}"
      loop:
        - vpcout.vpc.id
        - PrivSub2.subnet.id
        - PrivSub1.subnet.id
        - PubSub1.subnet.id
        - PubSub2.subnet.id
        - igwout.gateway_id
        - NatOut.nat_gateway_id
        - PubSubRT.route_table.id
        - PrivSubRT.route_table.id
    - set_fact:
        vpcid: "{{vpcout.vpc.id}}"
        privsub2id: "{{PrivSub2.subnet.id}}"
        privsub1id: "{{PrivSub1.subnet.id}}"
        pubsub1id: "{{PubSub1.subnet.id}}"
        pubsub2id: "{{PubSub2.subnet.id}}"
        igwid: "{{igwout.gateway_id}}"
        Natid: "{{NatOut.nat_gateway_id}}"
        pubRTid: "{{PubSubRT.route_table.id}}"
        privRTid: "{{PrivSubRT.route_table.id}}"
        cacheble: yes
    - name: create varible file for VPC
      copy:
        content: "vpcid: {{vpcout.vpc.id}}\nprivsub2id: {{PrivSub2.subnet.id}}\nprivsub1id: {{PrivSub1.subnet.id}}\npubsub1id: {{PubSub1.subnet.id}}\npubsub2id: {{PubSub2.subnet.id}}\nigwid: {{igwout.gateway_id}}\nNatid: {{NatOut.nat_gateway_id}}\npubRTid: {{PubSubRT.route_table.id}}\nprivRTid: {{PrivSubRT.route_table.id}}"
        dest: Vars/output











